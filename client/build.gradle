plugins {
    id 'kotlin-multiplatform' version '1.3.31'
}
repositories {
    mavenCentral()
    jcenter()
    maven {
        url  "https://kotlin.bintray.com/ktor"
    }
}

apply plugin: 'maven-publish'
apply plugin: 'signing'

apply from: "../gradle/experimental.gradle"
apply from: "./gradle/integration-tests-mqtt-servers.gradle"

kotlin {
    jvm()
//     js() {
//         tasks[compilations.main.compileKotlinTaskName].kotlinOptions.moduleKind = "umd"
//     }
    // For ARM, should be changed to iosArm32 or iosArm64
    // For Linux, should be changed to e.g. linuxX64
    // For MacOS, should be changed to e.g. macosX64
    // For Windows, should be changed to e.g. mingwX64
//     macosX64("macos")
    // linuxX64("linux")
    // mingwX64("windows")
//    targets {
//        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") ? presets.iosArm64 : presets.iosX64
//        fromPreset(iOSTarget, 'iOS')
//    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                compileOnly project(":wire4")
                implementation project(":wire.core")
                implementation project(":time")
                implementation "io.ktor:ktor-client-core:$ktor_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-io:$kotlinx_io_version"
                implementation "io.ktor:ktor-client-websocket:1.2.0-alpha-2"
            }
        }
        commonTest {
            dependencies {
                implementation project(":wire4")
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation "io.ktor:ktor-client-cio:$ktor_version"
                implementation "io.ktor:ktor-client-core-jvm:$ktor_version"
                implementation "org.jetbrains.kotlinx:kotlinx-io-jvm:$kotlinx_io_version"
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
//        jsMain {
//            dependencies {
//                implementation kotlin('stdlib-js')
//                implementation "org.jetbrains.kotlinx:kotlinx-io-js:$kotlinx_io_version"
//                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:$coroutines_version"
//                implementation "io.ktor:ktor-client-core-js:$ktor_version"
//                implementation "io.ktor:ktor-client-js:$ktor_version"
//            }
//        }
//        jsTest {
//            dependencies {
//                implementation kotlin('test-js')
//            }
//        }
        nativeMain {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-io-native:$kotlinx_io_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutines_version"
            }
        }
        macosMain {
            dependsOn nativeMain
        }
        iOSMain {
            dependencies {
                implementation "io.ktor:ktor-client-core-iosx64:$ktor_version"

                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-io-iosx64:0.1.8"
            }
            dependsOn nativeMain
        }
        windowsMain {
            dependsOn nativeMain
        }
        linuxMain {
            dependsOn nativeMain
        }
    }

    // Given that `-PisLinux=true` command line argument is passed when running on Linux,
    // these targets get published only from a Linux machine.
    // Note that the Kotlin metadata is here, too.
    // The mingwx64() target is automatically skipped as incompatible in Linux builds.
    configure([targets["metadata"], jvm()]) {//, js()]) {
        mavenPublication { linuxOnlyPublication ->
            tasks.withType(AbstractPublishToMaven).all {
                onlyIf {
                    publication != linuxOnlyPublication || findProperty("isLinux") == "true"
                }
            }
        }
    }
    targets.all {
        compilations.all {
            kotlinOptions {
                freeCompilerArgs += [
                        "-Xuse-experimental=kotlin.ExperimentalUnsignedTypes"
                ]
            }
        }
    }
}

publishing.publications {
    common(MavenPublication) {
        artifactId = 'client'
        // Add a docs JAR artifact (it should be a custom task):
//                artifact(javadocJar)
    }
}

//apply from: file("$projectDir/gradle/js-main.gradle")
//apply from: file("$rootProject.projectDir/gradle/ios.gradle")

apply from: file("$rootProject.projectDir/gradle/bintray.gradle")
apply from: file("$rootProject.projectDir/gradle/jacoco.gradle")

jvmTest {
    dependsOn startMosquittoTLS60001
    dependsOn startMosquitto60000Default
    finalizedBy stopMosquittoTLS60001
    finalizedBy stopMosquitto60000Default
}
String osName = System.getProperty("os.name").toLowerCase()
if (osName.contains("linux")) {
    bintrayUpload.dependsOn jvmTest
}