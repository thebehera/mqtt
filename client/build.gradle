import java.time.Duration

plugins {
    id 'kotlin-multiplatform'
    id 'kotlin-parcelize'
}
repositories {
    mavenCentral()
    jcenter()
}
apply from: "../gradle/experimental.gradle"
apply from: "../gradle/android.gradle"

kotlin {
    jvm()
    if (System.getenv("ANDROID_HOME")) {
        android()
    }
    js {
        nodejs {
            testTask {
                timeout = Duration.ofSeconds(10)
            }
        }
        browser {
            testTask {
                useKarma {
                    useChromeHeadless()
                    if (System.getenv().containsKey("MOZ_HEADLESS") || System.getenv().containsKey("FIREFOX_BIN")) {
                        useFirefox()
                    }
                }
                enabled = !System.getenv().containsKey("IGNORE_BROWSER_TESTS")
            }
        }
    }

//    ios("iOS")
//    macosX64("macos")
//    linuxX64("linux")
//    mingwX64("windows")
    sourceSets {
        js {
            nodejs {
                testTask {
                    timeout = Duration.ofSeconds(10)
                }
            }
        }
        commonMain {
            dependencies {
                compileOnly project(":wire4")
                compileOnly project(":wire5")
                implementation project(":wire-core")
                implementation project(":buffer")
                implementation project(":socket")
                implementation project(":persistence")
                implementation "com.squareup.sqldelight:coroutines-extensions:$sql_delight_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
            }
        }
        commonTest {
            dependencies {
                implementation project(":wire4")
                implementation project(":wire5")
                implementation kotlin('test')
                implementation kotlin('test-annotations-common')
            }
        }
        commonJvm {
            dependencies {
            }
        }
        commonJvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
            }
        }
        if (System.getenv("ANDROID_HOME")) {
            def work_version = "2.5.0"
            def appcompat_version = "1.2.0"
            androidMain {
                dependsOn commonJvm
                dependencies {
                    implementation "androidx.work:work-runtime-ktx:$work_version"
                    implementation "androidx.work:work-multiprocess:$work_version"
                    implementation 'androidx.core:core-ktx:1.3.2'
                    implementation 'androidx.compose.ui:ui:1.0.0-alpha11'
                    // Foundation (Border, Background, Box, Image, Scroll, shapes, animations, etc.)
                    implementation 'androidx.compose.foundation:foundation:1.0.0-alpha11'

                    // Material Design
                    implementation 'androidx.compose.material:material:1.0.0-alpha10'
                    // Material design icons
                    implementation 'androidx.compose.material:material-icons-core:1.0.0-alpha10'
                    implementation 'androidx.compose.material:material-icons-extended:1.0.0-alpha10'
                    // Integration with observables
                    implementation 'androidx.compose.runtime:runtime-livedata:1.0.0-alpha11'

                    implementation "androidx.appcompat:appcompat:$appcompat_version"

                }
            }
            androidTest {
                dependsOn commonJvmTest
            }
        }
        jvmMain {
            dependsOn commonJvm
            dependencies {
            }
        }
        jvmTest {
            dependsOn commonJvmTest
        }
        jsMain {
            dependencies {
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
                implementation npm('tcp-port-used', '1.0.1')
            }
        }

        posixMain {
            dependsOn commonMain
            dependencies {
            }
        }
        posixTest {
            dependsOn commonTest
            dependencies {
            }
        }

        iOSX64Main {
            dependsOn posixMain
        }
        iOSX64Test {
            dependsOn posixTest
        }
        iOSArm64Main {
            dependsOn posixMain
        }
        iOSArm64Test {
            dependsOn posixTest
        }
        linuxMain {
            dependsOn posixMain
        }
        linuxTest {
            dependsOn posixTest
        }
        macosMain {
            dependsOn posixMain
        }
        macosTest {
            dependsOn posixTest
        }
        windowsMain {
            dependsOn posixMain
        }
        windowsTest {
            dependsOn posixTest
        }
    }
    targets.all {
        compilations.all {
            kotlinOptions {
                freeCompilerArgs += [
                        "-Xuse-experimental=kotlin.ExperimentalUnsignedTypes",
                        "-Xuse-experimental=kotlin.ExperimentalStdlibApi",
                        "-Xopt-in=kotlin.time.ExperimentalTime"
                ]
            }
        }
    }
}
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

apply from: "./gradle/integration-tests-mqtt-servers.gradle"