plugins {
    id 'kotlin-multiplatform' version '1.3.21'
}
repositories {
    mavenCentral()
    jcenter()
}

group 'com.github.thebehera.mqtt'
def version_string = '0.0.' + (System.getenv('TRAVIS_BUILD_NUMBER') ?: '0')
version version_string

apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'
apply plugin: 'signing'

kotlin {
    jvm()
    js() {
        tasks[compilations.main.compileKotlinTaskName].kotlinOptions.moduleKind = "umd"
    }
    // For ARM, should be changed to iosArm32 or iosArm64
    // For Linux, should be changed to e.g. linuxX64
    // For MacOS, should be changed to e.g. macosX64
    // For Windows, should be changed to e.g. mingwX64
    macosX64("macos")
    linuxX64("linux")
    mingwX64("windows")
    targets {
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") ? presets.iosArm64 : presets.iosX64
        fromPreset(iOSTarget, 'iOS')
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }
        macosMain {
        }
        macosTest {
        }
        iOSMain {

        }
        iOSTest {

        }
    }

    // Given that `-PisLinux=true` command line argument is passed when running on Linux,
    // these targets get published only from a Linux machine.
    // Note that the Kotlin metadata is here, too.
    // The mingwx64() target is automatically skipped as incompatible in Linux builds.
    configure([targets["metadata"], jvm(), js()]) {
        mavenPublication { linuxOnlyPublication ->
            tasks.withType(AbstractPublishToMaven).all {
                onlyIf {
                    publication != linuxOnlyPublication || findProperty("isLinux") == "true"
                }
            }
        }
    }
}

publishing.publications {
    common(MavenPublication) {
        artifactId = 'mqtt'
        // Add a docs JAR artifact (it should be a custom task):
//                artifact(javadocJar)
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key =  project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    publish = true
    override = true // for multi-platform Kotlin/Native publishing
    pkg {
        repo = 'mqtt'
        name = 'wire'
        userOrg = user
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/thebehera/mqtt.git'
        labels = ['mqtt']
        publicDownloadNumbers = true
        attributes= ['mqtt': ['true']] //Optional package-level attributes
        version {
            name = version_string
            desc = 'Gradle Bintray Plugin 1.0 final'
            vcsTag = '0.0.0'
        }
    }
}

bintrayUpload.dependsOn publishToMavenLocal

// This is for easier debugging of bintray uploading problems
bintrayUpload.doFirst {
    publications = project.publishing.publications.findAll { !it.name.contains('-test') }.collect {
        println("Uploading artifact '$it.groupId:$it.artifactId:$it.version' from publication '$it.name'")
        it.name
    }
}

// ==== CONFIGURE JS =====

tasks.withType(compileKotlinJs.getClass()) {
    kotlinOptions {
        moduleKind = "umd"
        sourceMap = true
        metaInfo = true
    }
}

compileKotlinJs {
    kotlinOptions {
        // NOTE: Module base-name must be equal to the package name declared in package.json
        def baseName = "wire"
        outputFile = new File(outputFile.parent, baseName + ".js")
    }
}

apply from: file("$rootProject.projectDir/gradle/node-js.gradle")
apply from: file("$rootProject.projectDir/gradle/test-mocha-js.gradle")
apply from: file("$rootProject.projectDir/gradle/publish-npm-js.gradle")

// Workaround the problem with Node downloading
repositories.whenObjectAdded {
    if (it instanceof IvyArtifactRepository) {
        metadataSources {
            artifact()
        }
    }
}
// ==== !CONFIGURE JS =====


// ==== CONFIGURE ios =====
task iOSTest {
    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone XR"
    dependsOn 'linkTestIOS'
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs tests for target 'iOS' on an iOS simulator"

    doLast {
        def binary = kotlin.targets.iOS.compilations.test.getBinary('EXECUTABLE', 'DEBUG')
        println(binary)
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
        }
    }
}
iOSTest.onlyIf {System.getProperty("os.name").toLowerCase().contains("mac")}

task CI {}
String osName = System.getProperty("os.name").toLowerCase()
if (osName.contains("mac")) {
    CI.dependsOn macosTest, iOSTest
} else if (osName.contains("linux")) {
    CI.dependsOn linuxTest, jsTest, jvmTest
} else {
    CI.dependsOn windowsTest
}
