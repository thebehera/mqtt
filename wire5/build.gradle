plugins {
    id 'kotlin-multiplatform'
}
if (System.getenv("ANDROID_HOME") && JavaVersion.current().ordinal() == JavaVersion.VERSION_1_8.ordinal()) {
    apply plugin: 'com.android.library'
    apply plugin: 'kotlin-android-extensions'
    androidExtensions {
        experimental = true
    }
    android {
        compileSdkVersion 29
        defaultConfig {
            minSdkVersion 15
        }
        buildTypes {
            release {
                minifyEnabled true
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            }
        }
        packagingOptions {
            exclude 'META-INF/*.kotlin_module'
            exclude 'io/ktor/http/cio/internals/*.kotlin_metadata'
            exclude 'io/ktor/client/features/websocket/*.kotlin_metadata'
            exclude 'io/ktor/http/cio/websocket/*.kotlin_metadata'
            exclude 'io/ktor/http/cio/*.kotlin_metadata'
        }
        sourceSets {
            main {
                manifest.srcFile 'src/androidMain/AndroidManifest.xml'
                java.srcDirs = ['src/androidMain/kotlin']
                res.srcDirs = ['src/androidMain/res']
            }
            androidTest {
                java.srcDirs = ['src/androidTest/kotlin']
                res.srcDirs = ['src/androidTest/res']
            }
        }

    }
}
configurations {
    compileClasspath
}
repositories {
    mavenCentral()
    jcenter()
}

apply from: "../gradle/experimental.gradle"
kotlin {
    jvm()
    //if (System.getenv("ANDROID_HOME") && JavaVersion.current().ordinal() == JavaVersion.VERSION_1_8.ordinal()) {
//        android()
//    }
    ios("iOS")
    macosX64("macos")
    linuxX64("linux")
    mingwX64("windows")
    js {
        browser {
            testTask {
                useKarma {
                    if (System.getenv().containsKey("CHROME_BIN")) {
                        useChromeHeadless()
                    }
                    if (System.getenv().containsKey("MOZ_HEADLESS") || System.getenv().containsKey("FIREFOX_BIN")) {
                        useFirefox()
                    }
                }
                enabled = (System.getenv().containsKey("MOZ_HEADLESS") || System.getenv().containsKey("FIREFOX_BIN") || System.getenv().containsKey("CHROME_BIN"))
            }
        }
        nodejs {
            testTask {

            }
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation project(':buffer')
                implementation project(':wire-core')
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk7')
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        if (System.getenv("ANDROID_HOME") && JavaVersion.current().ordinal() == JavaVersion.VERSION_1_8.ordinal()) {
            androidMain {
                dependencies {
                    implementation "androidx.room:room-common:$room_version"
                    implementation project(':wire-core')
                    implementation kotlin('stdlib-jdk7')
                }
            }
            androidTest {
                dependencies {
                    implementation kotlin('test')
                    implementation kotlin('test-junit')
                }
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
                implementation(npm("text-encoding", "0.7.0"))
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:$coroutines_version"
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }
    }

    targets.all {
        compilations.all {
            kotlinOptions {
                freeCompilerArgs += [
                        "-Xuse-experimental=kotlin.ExperimentalUnsignedTypes",
                        "-Xuse-experimental=kotlin.ExperimentalStdlibApi"
                ]
            }
        }
    }
}
configurations {
    compileClasspath
}
if (System.getenv("ANDROID_HOME") && JavaVersion.current().ordinal() == JavaVersion.VERSION_1_8.ordinal()) {
    dependencies {
        implementation project(':wire-core')
    }
}