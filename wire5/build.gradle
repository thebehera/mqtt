plugins {
    id 'kotlin-multiplatform' version '1.3.31'
}
repositories {
    mavenCentral()
    jcenter()
}

apply plugin: 'maven-publish'
apply plugin: 'signing'

apply from: "../gradle/experimental.gradle"
kotlin {
    jvm()
    js() {
        tasks[compilations.main.compileKotlinTaskName].kotlinOptions.moduleKind = "umd"
    }
    linuxX64("linux")
    mingwX64("windows")
    targets {
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") \
                              ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'iOS') {
            binaries {
                framework('SharedCode')
            }
        }

        fromPreset(presets.jvm, 'android')
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation project(':wire-core')
                implementation "org.jetbrains.kotlinx:kotlinx-io:$kotlinx_io_version"
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation "org.jetbrains.kotlinx:kotlinx-io-jvm:$kotlinx_io_version"
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
                implementation "org.jetbrains.kotlinx:kotlinx-io-js:$kotlinx_io_version"
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }

        nativeMain {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-io-native:$kotlinx_io_version"
            }
        }
        iOSMain {
            dependsOn nativeMain
        }
        windowsMain {
            dependsOn nativeMain
        }
        linuxMain {
            dependsOn nativeMain
        }
    }

    // Given that `-PisLinux=true` command line argument is passed when running on Linux,
    // these targets get published only from a Linux machine.
    // Note that the Kotlin metadata is here, too.
    // The mingwx64() target is automatically skipped as incompatible in Linux builds.
    configure([targets["metadata"], jvm(), js()]) {
        mavenPublication { linuxOnlyPublication ->
            tasks.withType(AbstractPublishToMaven).all {
                onlyIf {
                    publication != linuxOnlyPublication || findProperty("isLinux") == "true"
                }
            }
        }
    }

    targets.all {
        compilations.all {
            kotlinOptions {
                freeCompilerArgs += [
                        "-Xuse-experimental=kotlin.ExperimentalUnsignedTypes"
                ]
            }
        }
    }
}

publishing.publications {
    common(MavenPublication) {
        artifactId = 'mqtt'
        // Add a docs JAR artifact (it should be a custom task):
//                artifact(javadocJar)
    }
}

configurations {
    compileClasspath
}

task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
    final def framework = kotlin.targets.iOS.binaries.getFramework("SharedCode", mode)

    inputs.property "mode", mode
    dependsOn framework.linkTask

    from { framework.outputFile.parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}
tasks.build.dependsOn packForXCode

apply from: file("$projectDir/gradle/js-main.gradle")
//apply from: file("$rootProject.projectDir/gradle/ios.gradle")
apply from: file("$rootProject.projectDir/gradle/bintray.gradle")
apply from: file("$rootProject.projectDir/gradle/jacoco.gradle")
