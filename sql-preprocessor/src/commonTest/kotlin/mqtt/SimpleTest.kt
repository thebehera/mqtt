package mqtt

import mqtt.sql.FlatAllTypesIncludingNullableUnkeyed
import mqtt.sql.SupertypeUnkeyed
import mqtt.sql.TableMetadata
import kotlin.test.Test
import kotlin.test.assertEquals

@ExperimentalUnsignedTypes
class SimpleTest {
    private val flatTable = TableMetadata(FlatAllTypesIncludingNullableUnkeyed::class)
    private val superTypeUnkeyed = TableMetadata(SupertypeUnkeyed::class)

    @Test
    fun SupertypeUnkeyedTableCreation() {
        val tables = superTypeUnkeyed.createChildTablesForInheritence()
        assertEquals(5, tables.size)
        assertEquals(
            """
            CREATE TABLE 'mqtt.sql.SupertypeUnkeyed'(
              autogenerated_sql_id INTEGER NOT NULL PRIMARY KEY,
              property mqtt.sql.FlatAllTypesIncludingNullableUnkeyed NOT NULL,
              superParameter TEXT NOT NULL
            );
        """.trimIndent(), tables[0].toString()
        )
        assertEquals(
            """
            CREATE TABLE 'mqtt.sql.Child1Unkeyed'(
              autogenerated_sql_id INTEGER NOT NULL PRIMARY KEY,
              propertyChild1 TEXT,
              property mqtt.sql.FlatAllTypesIncludingNullableUnkeyed NOT NULL,
              superParameter TEXT NOT NULL
            );
        """.trimIndent(), tables[1].toString()
        )
        assertEquals(
            """
            CREATE TABLE 'mqtt.sql.ChildWithMapUnkeyed'(
              autogenerated_sql_id INTEGER NOT NULL PRIMARY KEY,
              propertyChild2 kotlin.collections.Map<kotlin.String, kotlin.String> NOT NULL,
              property mqtt.sql.FlatAllTypesIncludingNullableUnkeyed NOT NULL,
              superParameter TEXT NOT NULL
            );
        """.trimIndent(), tables[2].toString()
        )
        assertEquals(
            """
            CREATE TABLE 'mqtt.sql.Child2Unkeyed'(
              autogenerated_sql_id INTEGER NOT NULL PRIMARY KEY,
              propertyChild2 INT NOT NULL,
              property mqtt.sql.FlatAllTypesIncludingNullableUnkeyed NOT NULL,
              superParameter TEXT NOT NULL
            );
        """.trimIndent(), tables[3].toString()
        )
        assertEquals(
            """
            CREATE TABLE 'mqtt.sql.ChildWithCollectionUnkeyed'(
              autogenerated_sql_id INTEGER NOT NULL PRIMARY KEY,
              propertyChild2 kotlin.collections.Collection<kotlin.String> NOT NULL,
              property mqtt.sql.FlatAllTypesIncludingNullableUnkeyed NOT NULL,
              superParameter TEXT NOT NULL
            );
        """.trimIndent(), tables[4].toString()
        )
    }

    @Test
    fun FlatAllTypesIncludingNullableUnkeyedTableCreation() {
        val expected = """
            CREATE TABLE 'mqtt.sql.FlatAllTypesIncludingNullableUnkeyed'(
              autogenerated_sql_id INTEGER NOT NULL PRIMARY KEY,
              bool BIT(1) NOT NULL,
              boolNullable BIT(1),
              byte TINYINT NOT NULL,
              byteArray BLOB NOT NULL,
              byteArrayNullable BLOB NOT NULL,
              byteNullable TINYINT,
              char CHARACTER NOT NULL,
              charNullable CHARACTER,
              double DOUBLE NOT NULL,
              doubleNullable DOUBLE,
              float FLOAT NOT NULL,
              floatNullable FLOAT,
              int INT NOT NULL,
              intNullable INT,
              long BIGINT NOT NULL,
              longNullable BIGINT,
              short SMALLINT NOT NULL,
              shortNullable SMALLINT,
              string TEXT NOT NULL,
              stringNullable TEXT,
              uByte TINYINT UNSIGNED NOT NULL,
              uByteArray BLOB NOT NULL,
              uByteArrayNullable BLOB,
              uByteNullable TINYINT UNSIGNED,
              uInt INT UNSIGNED NOT NULL,
              uIntNullable INT UNSIGNED,
              uLong BIGINT UNSIGNED NOT NULL,
              uLongNullable BIGINT UNSIGNED,
              uShort SMALLINT UNSIGNED NOT NULL,
              uShortNullable SMALLINT UNSIGNED
            );
        """.trimIndent()
        assertEquals(expected, flatTable.createTable.toString())
    }

    @Test
    fun FlatAllTypesIncludingNullableUnkeyedTableCreationIfNotExists() {
        val expectedIfNotExists = """
            CREATE TABLE IF NOT EXISTS 'mqtt.sql.FlatAllTypesIncludingNullableUnkeyed'(
              autogenerated_sql_id INTEGER NOT NULL PRIMARY KEY,
              bool BIT(1) NOT NULL,
              boolNullable BIT(1),
              byte TINYINT NOT NULL,
              byteArray BLOB NOT NULL,
              byteArrayNullable BLOB NOT NULL,
              byteNullable TINYINT,
              char CHARACTER NOT NULL,
              charNullable CHARACTER,
              double DOUBLE NOT NULL,
              doubleNullable DOUBLE,
              float FLOAT NOT NULL,
              floatNullable FLOAT,
              int INT NOT NULL,
              intNullable INT,
              long BIGINT NOT NULL,
              longNullable BIGINT,
              short SMALLINT NOT NULL,
              shortNullable SMALLINT,
              string TEXT NOT NULL,
              stringNullable TEXT,
              uByte TINYINT UNSIGNED NOT NULL,
              uByteArray BLOB NOT NULL,
              uByteArrayNullable BLOB,
              uByteNullable TINYINT UNSIGNED,
              uInt INT UNSIGNED NOT NULL,
              uIntNullable INT UNSIGNED,
              uLong BIGINT UNSIGNED NOT NULL,
              uLongNullable BIGINT UNSIGNED,
              uShort SMALLINT UNSIGNED NOT NULL,
              uShortNullable SMALLINT UNSIGNED
            );
        """.trimIndent()
        assertEquals(expectedIfNotExists, flatTable.createTableIfNotExists.toString())
    }





//    @Test
//    fun main() {
//        println("/* Create Tables for queued objects */")
//        println(createTable(Queued::class, {
//            if (it.name == "queuedObject") {
//                "TEXT"
//            } else {
//                null
//            }
//        }))
//        println(createTable(NonKeyedChild::class))
//        println(createTable(PrimaryKeyChild::class))
//        println("\n\n/* Insert into for queued objects */")
//
//        // deleting from the queue deletes from the child table
//        println(insertInto<Queued>())
//        println(insertInto<NonKeyedChild>())
//        println(insertInto<PrimaryKeyChild>())
//
//        println("\n\n/* Create Views for queued objects */")
//        // we need to pop from the queue
//        /**
//         * SELECT `mqtt.simpleTest.Queued`.messageId, `mqtt.SimpleTest.NonKeyedChild`.*
//         * FROM `mqtt.simpleTest.Queued`
//         * INNER JOIN `mqtt.SimpleTest.NonKeyedChild` ON `mqtt.simpleTest.Queued`.queuedObject = `mqtt.SimpleTest.NonKeyedChild`.mqtt_inserted_id
//         * ORDER BY `mqtt.simpleTest.Queued`.queuedObject
//         * LIMIT 1;
//         */
//
//        println(createView(Queued::class, "queuedObject", "messageId", NonKeyedChild::class, "mqtt_inserted_id"))
//        println()
//        println(createView(Queued::class, "queuedObject", "messageId", PrimaryKeyChild::class, "identifier"))
//
//
//        // Create triggers so if an item is
//        println("\n\n/* Delete the objects from the queued table as a trigger */")
//        val childTriggers = HashMap<KClass<*>, String>(2)
//        childTriggers[NonKeyedChild::class] = "mqtt_inserted_id"
//        childTriggers[PrimaryKeyChild::class] = "identifier"
//        createChildMappingDeleteTrigger(Queued::class, "queuedObject", childTriggers).forEach {
//            println(it)
//        }
//        // delete later from the queue
//        println("\n\n/* Delete the queued objects */")
//        println(delete("messageId", Queued::class.qualifiedName!!))
//        println(delete("mqtt_inserted_id", NonKeyedChild::class.qualifiedName!!))
//        println(delete("identifier", PrimaryKeyChild::class.qualifiedName!!))
//
//        println("\n\n/* Inherited objects */")
//        createTableInheritence<Vehicle>(CommercialTruck::class, Car::class).forEach { println(it) }
//
//
//    }
}
