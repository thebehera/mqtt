apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
androidExtensions {
    experimental = true
}

def getLocalIPv4() {
    def ip4s = []
    NetworkInterface.getNetworkInterfaces()
            .findAll { it.isUp() && !it.isLoopback() && !it.isVirtual() }
            .each {
                it.getInetAddresses()
                        .findAll { !it.isLoopbackAddress() && it instanceof Inet4Address }
                        .each { ip4s << it.getHostAddress() }
            }
    return "{\"" + ip4s.join("\", \"") + "\"}"
}
def getLocalIPv6() {
    def ip6s = []
    NetworkInterface.getNetworkInterfaces()
            .findAll { it.isUp() && !it.isLoopback() && !it.isVirtual() }
            .each {
                it.getInetAddresses()
                        .findAll { !it.isLoopbackAddress() && it instanceof Inet6Address }
                        .each { ip6s << it.getHostAddress() }
            }
    return "{\"" + ip6s.join("\", \"") + "\"}"
}

android {
    compileSdkVersion 29
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    dataBinding.enabled = true

    kotlinOptions {
        jvmTarget = "1.8"
    }
    defaultConfig {
        applicationId "mqtt.android_app"
        minSdkVersion 15
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
        buildConfigField "String[]", "IPV4", getLocalIPv4()
        buildConfigField "String[]", "IPV6", getLocalIPv6()
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    packagingOptions {
        exclude 'io/ktor/client/features/websocket/*.kotlin_metadata'
        exclude 'io/ktor/http/cio/internals/*.kotlin_metadata'
        exclude 'io/ktor/http/cio/websocket/*.kotlin_metadata'
        exclude 'io/ktor/http/cio/*.kotlin_metadata'
        exclude 'META-INF/*.kotlin_module'
    }

    sourceSets.debug.kotlin.srcDirs += ['build/generated/source/kaptKotlin/debug']
    sourceSets.release.kotlin.srcDirs += ['build/generated/source/kaptKotlin/release']

}
dependencies {
    implementation project(":android_roomdb_core")
    kapt project(":android_roomdb_generator")

    implementation project(":client")
    implementation project(":buffer")
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$room_version"


    implementation "org.jetbrains.kotlinx:kotlinx-io-jvm:$kotlinx_io_version"
    implementation project(":wire4")
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$ktx_lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-extensions:$ktx_lifecycle_version"
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
