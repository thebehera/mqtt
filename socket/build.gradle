plugins {
    id 'kotlin-multiplatform'
}
repositories {
    mavenCentral()
    jcenter()
}

apply from: "../gradle/android.gradle"
apply from: "../gradle/experimental.gradle"
kotlin {
    jvm()
    js {
        nodejs {
            testTask {
                useMocha {
                    timeout = "10000"
                }
            }
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"
                implementation project(':buffer')
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
//        if (System.getenv("ANDROID_HOME") && JavaVersion.current().ordinal() == JavaVersion.VERSION_1_8.ordinal()) {
//            androidMain {
//                dependsOn jvmMain
//            }
//            androidTest {
//                dependsOn jvmTest
//            }
//        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:$coroutines_version"
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
                implementation npm('tcp-port-used', '1.0.1')
            }
        }
    }

    targets.all {
        compilations.all {
            kotlinOptions {
                freeCompilerArgs += [
                        "-Xuse-experimental=kotlin.ExperimentalUnsignedTypes",
                        "-Xuse-experimental=kotlin.ExperimentalStdlibApi",
                        "-Xopt-in=kotlin.time.ExperimentalTime",
                        "-Xopt-in=kotlin.RequiresOptIn"
                ]
            }
        }
    }
}